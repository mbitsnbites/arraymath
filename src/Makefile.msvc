# -*- Mode: Makefile; tab-width: 4; indent-tabs-mode: t -*-
#-------------------------------------------------------------------------------
# ArrayMath - an array math library
#-------------------------------------------------------------------------------
# Copyright(c) 2013-2014 Marcus Geelnard
#
# This software is provided 'as-is', without any express or implied warranty.
# In no event will the authors be held liable for any damages arising from the
# use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not claim
#    that you wrote the original software. If you use this software in a
#    product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
#
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
#
# 3. This notice may not be removed or altered from any source distribution.
#-------------------------------------------------------------------------------

# C compiler settings
CC = cl
CFLAGS = /nologo /c /Ox /fp:fast /I. /Ikiss_fft

# C++ compiler settings
CPP = cl
CPPFLAGS = /nologo /c /Ox /fp:fast /I. /Ikiss_fft
RM = del /S /Q

# x86 SIMD activation
CPPFLAGS = $(CPPFLAGS) /DAM_HAS_SSE /DAM_HAS_SSE2 /DAM_HAS_SSE4 /DAM_HAS_AVX /DAM_USE_KISS_FFT

OUTDIR = out_x86

# FFT objects
FFT_OBJS = $(OUTDIR)\kiss_fft.obj \
           $(OUTDIR)\kiss_fftr.obj \
           $(OUTDIR)\FFTKiss.obj

# Core ArrayMath objects
OBJS = $(OUTDIR)\ArrayMath.obj \
       $(OUTDIR)\ArrayMathAVX.obj \
       $(OUTDIR)\ArrayMathGeneric.obj \
       $(OUTDIR)\ArrayMathSSE.obj \
       $(OUTDIR)\ArrayMathSSE4.obj \
       $(OUTDIR)\CPUFeatureDetector.obj \
       $(OUTDIR)\FilterFactory.obj \
       $(OUTDIR)\FilterGeneric.obj \
       $(OUTDIR)\FFTFactory.obj \
       $(OUTDIR)\RandomGeneric.obj \
       $(OUTDIR)\RandomSSE2.obj \
       $(FFT_OBJS)

BENCHMARK_OBJS = $(OUTDIR)/Benchmark.obj

TEST_OBJS = $(OUTDIR)/Test.obj \
            $(OUTDIR)/Tester.obj \
            $(OUTDIR)/TestArrayMath.obj \
            $(OUTDIR)/TestFFTFactory.obj \
            $(OUTDIR)/TestFilterFactory.obj \
            $(OUTDIR)/TestRandom.obj

all: $(OUTDIR)\Benchmark.exe $(OUTDIR)\Test.exe

clean:
	$(RM) $(OBJS) $(BENCHMARK_OBJS) $(TEST_OBJS) $(OUTDIR)\Test.exe $(OUTDIR)\Benchmark.exe

$(OUTDIR)\Benchmark.exe: $(OBJS) $(BENCHMARK_OBJS)
	$(CPP) /nologo /Fe$@ $(OBJS) $(BENCHMARK_OBJS)

$(OUTDIR)\Test.exe: $(OBJS) $(TEST_OBJS)
	$(CPP) /nologo /Fe$@ $(OBJS) $(TEST_OBJS)

$(OUTDIR)\Benchmark.obj: test\Benchmark.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ test\Benchmark.cpp

$(OUTDIR)\Test.obj: test\Test.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ test\Test.cpp

$(OUTDIR)\Tester.obj: test\Tester.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ test\Tester.cpp

$(OUTDIR)\TestArrayMath.obj: test\TestArrayMath.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ test\TestArrayMath.cpp

$(OUTDIR)\TestFFTFactory.obj: test\TestFFTFactory.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ test\TestFFTFactory.cpp

$(OUTDIR)\TestFilterFactory.obj: test\TestFilterFactory.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ test\TestFilterFactory.cpp

$(OUTDIR)\TestRandom.obj: test\TestRandom.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ test\TestRandom.cpp

$(OUTDIR)\ArrayMath.obj: ArrayMath.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ ArrayMath.cpp

$(OUTDIR)\ArrayMathAVX.obj: x86\ArrayMathAVX.cpp
	$(CPP) $(CPPFLAGS) /arch:AVX /Fo$@ x86\ArrayMathAVX.cpp

$(OUTDIR)\ArrayMathGeneric.obj: generic\ArrayMathGeneric.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ generic\ArrayMathGeneric.cpp

$(OUTDIR)\ArrayMathSSE.obj: x86\ArrayMathSSE.cpp
	$(CPP) $(CPPFLAGS) /arch:SSE /Fo$@ x86\ArrayMathSSE.cpp

$(OUTDIR)\ArrayMathSSE4.obj: x86\ArrayMathSSE4.cpp
	$(CPP) $(CPPFLAGS) /arch:SSE2 /Fo$@ x86\ArrayMathSSE4.cpp

$(OUTDIR)\CPUFeatureDetector.obj: common\CPUFeatureDetector.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ common\CPUFeatureDetector.cpp

$(OUTDIR)\FilterFactory.obj: FilterFactory.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ FilterFactory.cpp

$(OUTDIR)\FilterGeneric.obj: generic\FilterGeneric.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ generic\FilterGeneric.cpp

$(OUTDIR)\FFTFactory.obj: FFTFactory.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ FFTFactory.cpp

$(OUTDIR)\RandomGeneric.obj: generic\RandomGeneric.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ generic\RandomGeneric.cpp

$(OUTDIR)\RandomSSE2.obj: x86\RandomSSE2.cpp
	$(CPP) $(CPPFLAGS) /arch:SSE2 /Fo$@ x86\RandomSSE2.cpp

$(OUTDIR)\kiss_fft.obj: kiss_fft\kiss_fft.c
	$(CC) $(CFLAGS) /Fo$@ kiss_fft\kiss_fft.c

$(OUTDIR)\kiss_fftr.obj: kiss_fft\tools\kiss_fftr.c
	$(CC) $(CFLAGS) /Fo$@ kiss_fft\tools\kiss_fftr.c

$(OUTDIR)\FFTKiss.obj: generic\FFTKiss.cpp
	$(CPP) $(CPPFLAGS) /Fo$@ generic\FFTKiss.cpp
