ArrayMath
=========

ArrayMath is a portable low level C++ library for performing primitive math
operations on arrays.

The idea is to provide a simple interface to highly optimized math kernels.


1. Usage
--------

Provided that you've built all the .cpp files into object files or a library
that you link to your project, here's some basic usage info:


1.1 Using the ArrayMath interface
---------------------------------

#include <ArrayMath.h>

void myFunction {
  // Initialize the ArrayMath object. Note: This object may contain state (for
  // instance for the random number generator), so it is *not* thread safe.
  arraymath::ArrayMath math;

  // Call array methods.
  const unsigned len = 128;
  float a[len], b[len];
  math.ramp(a, 0.0f, 100.0f, len);    // a = [0.0 .. 100.0]
  math.random(b, -1.0f, 1.0f, len);   // b = random, [-1.0, 1.0)
  math.madd(a, 0.5f, a, b, len);      // a = 0.5 * a + b
}


1.2 Using the FilterFactory interface
-------------------------------------

#include <ArrayMath.h>
#include <FilterFactory.h>

void myFunction {
  // Initialize the FilterFactory object.
  arraymath::FilterFactory filterFactory;

  // Create a filter object (a 5th order FIR filter).
  arraymath::Filter* f = filterFactory.createFilter(6, 0);
  if (!f) {
    std::cout << "Unable to create filter." << std::endl;
    return;
  }

  // Set the filter coefficients.
  float b[6] = { 0.05f, 0.15f, 0.3f, 0.3f, 0.15f, 0.05f };
  f->setB(b);

  // Create an input array with white noise.
  ArrayMath math;
  const unsigned len = 128;
  float x[len];
  math.random(x, -1.0f, 1.0f, len);   // x = random, [-1.0, 1.0)

  // Create a filtered output array.
  float y[len];
  f->filter(y, x, len);

  // Delete the filter object.
  delete f;
}


2. License
----------

ArrayMath is released under the zlib/libpng license:

 Copyright (c) 2013 Marcus Geelnard

 This software is provided 'as-is', without any express or implied warranty.
 In no event will the authors be held liable for any damages arising from the
 use of this software.

